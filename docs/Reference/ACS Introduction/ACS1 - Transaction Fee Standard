ACS1 - Transaction Fee Standard

ACS1 manages transaction fees and is integrated into contracts needing fee management.

### Interface

Contracts inheriting ACS1 must implement the following APIs:

#### Methods

| Method Name              | Request Type             | Response Type               | Description                                                 |
|--------------------------|--------------------------|-----------------------------|-------------------------------------------------------------|
| SetMethodFee             | acs1.MethodFees          | google.protobuf.Empty       | Sets fees for a specified method, overriding existing fees.  |
| ChangeMethodFeeController| AuthorityInfo            | google.protobuf.Empty       | Changes the method fee controller (default: parliament).     |
| GetMethodFee             | google.protobuf.StringValue | acs1.MethodFees          | Retrieves method fee information by method name.             |
| GetMethodFeeController   | google.protobuf.Empty    | AuthorityInfo               | Retrieves the current method fee controller.                 |

### Types

#### acs1.MethodFee

| Field         | Type          | Description                     | Label     |
|---------------|---------------|---------------------------------|-----------|
| symbol        | string        | Token symbol of the method fee.  |           |
| basic_fee     | int64         | Fee amount to be charged.       |           |

#### acs1.MethodFees

| Field         | Type          | Description                     | Label     |
|---------------|---------------|---------------------------------|-----------|
| method_name   | string        | Name of the method.              |           |
| fees          | MethodFee     | List of fees for the method.     | repeated  |
| is_size_fee_free | bool      | Indicates if size fee is free.  |           |

#### AuthorityInfo

| Field             | Type               | Description                               | Label     |
|-------------------|--------------------|-------------------------------------------|-----------|
| contract_address  | aelf.Address       | Contract address of the controller.        |           |
| owner_address     | aelf.Address       | Address of the owner of the contract.      |           |

**Note:** Only system contracts on the main chain can implement ACS1.

### Usage

In aelf, transaction fees are managed by ACS1 through a pre-transaction generated by FeeChargePreExecutionPlugin. This plugin charges transaction fees before processing the main transaction.

The usage of ChargeTransactionFees method is implemented as below:

    ```cs
    /// <summary>
    /// Related transactions will be generated by acs1 pre-plugin service,
    /// and will be executed before the origin transaction.
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    public override BoolValue ChargeTransactionFees(ChargeTransactionFeesInput input)
    {
        // ...
        // Record tx fee bill during current charging process.
        var bill = new TransactionFeeBill();
        var fromAddress = Context.Sender;
        var methodFees = Context.Call<MethodFees>(input.ContractAddress, nameof(GetMethodFee),
            new StringValue {Value = input.MethodName});
        var successToChargeBaseFee = true;
        if (methodFees != null && methodFees.Fees.Any())
        {
            successToChargeBaseFee = ChargeBaseFee(GetBaseFeeDictionary(methodFees), ref bill);
        }
        var successToChargeSizeFee = true;
        if (!IsMethodFeeSetToZero(methodFees))
        {
            // Then also do not charge size fee.
            successToChargeSizeFee = ChargeSizeFee(input, ref bill);
        }
        // Update balances.
        foreach (var tokenToAmount in bill.FeesMap)
        {
            ModifyBalance(fromAddress, tokenToAmount.Key, -tokenToAmount.Value);
            Context.Fire(new TransactionFeeCharged
            {
                Symbol = tokenToAmount.Key,
                Amount = tokenToAmount.Value
            });
            if (tokenToAmount.Value == 0)
            {
                //Context.LogDebug(() => $"Maybe incorrect charged tx fee of {tokenToAmount.Key}: it's 0.");
            }
        }
        return new BoolValue {Value = successToChargeBaseFee && successToChargeSizeFee};
    }
    ```

The usage of TransferTransactionFeesToFeeReceiver method is implemented as below:

    ```cs
    /// <summary>
    /// Burn 10% of tx fees.
    /// If Side Chain didn't set FeeReceiver, burn all.
    /// </summary>
    /// <param name="symbol"></param>
    /// <param name="totalAmount"></param>
    private void TransferTransactionFeesToFeeReceiver(string symbol, long totalAmount)
    {
        Context.LogDebug(() => "Transfer transaction fee to receiver.");
        if (totalAmount <= 0) return;
        var burnAmount = totalAmount.Div(10);
        if (burnAmount > 0)
            Context.SendInline(Context.Self, nameof(Burn), new BurnInput
            {
                Symbol = symbol,
                Amount = burnAmount
            });
        var transferAmount = totalAmount.Sub(burnAmount);
        if (transferAmount == 0)
            return;
        var treasuryContractAddress =
            Context.GetContractAddressByName(SmartContractConstants.TreasuryContractSystemName);
        if ( treasuryContractAddress!= null)
        {
            // Main chain would donate tx fees to dividend pool.
            if (State.DividendPoolContract.Value == null)
                State.DividendPoolContract.Value = treasuryContractAddress;
            State.DividendPoolContract.Donate.Send(new DonateInput
            {
                Symbol = symbol,
                Amount = transferAmount
            });
        }
        else
        {
            if (State.FeeReceiver.Value != null)
            {
                Context.SendInline(Context.Self, nameof(Transfer), new TransferInput
                {
                    To = State.FeeReceiver.Value,
                    Symbol = symbol,
                    Amount = transferAmount,
                });
            }
            else
            {
                // Burn all!
                Context.SendInline(Context.Self, nameof(Burn), new BurnInput
                {
                    Symbol = symbol,
                    Amount = transferAmount
                });
            }
        }
    }
    ```

### Implementation

Implement ACS1 by defining GetMethodFee to manage method-specific fees. Optionally, use MappedState for efficient fee management across methods.

### Test

Test ACS1 functionality by calling GetMethodFee and GetMethodFeeController to validate expected behavior.

### Example

All aelf system contracts implement ACS1, providing a reference for implementation.